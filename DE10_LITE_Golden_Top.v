// ============================================================================
//   Ver  :| Author					:| Mod. Date :| Changes Made:
//   V1.1 :| Alexandra Du			:| 06/01/2016:| Added Verilog file
// ============================================================================


//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

`define ENABLE_ADC_CLOCK
`define ENABLE_CLOCK1
//`define ENABLE_CLOCK2
//`define ENABLE_SDRAM
`define ENABLE_HEX0
`define ENABLE_HEX1
`define ENABLE_HEX2
`define ENABLE_HEX3
`define ENABLE_HEX4
`define ENABLE_HEX5
`define ENABLE_KEY
`define ENABLE_LED
`define ENABLE_SW
/*`define ENABLE_VGA
`define ENABLE_ACCELEROMETER
`define ENABLE_ARDUINO*/
`define ENABLE_GPIO

module DE10_LITE_Golden_Top(

	//////////// ADC CLOCK: 3.3-V LVTTL //////////
`ifdef ENABLE_ADC_CLOCK
	input 		          		ADC_CLK_10,
`endif
	//////////// CLOCK 1: 3.3-V LVTTL //////////
`ifdef ENABLE_CLOCK1
	input 		          		MAX10_CLK1_50,
`endif
	//////////// CLOCK 2: 3.3-V LVTTL //////////
`ifdef ENABLE_CLOCK2
	input 		          		MAX10_CLK2_50,
`endif

	//////////// SDRAM: 3.3-V LVTTL //////////
`ifdef ENABLE_SDRAM
	output		    [12:0]		DRAM_ADDR,
	output		     [1:0]		DRAM_BA,
	output		          		DRAM_CAS_N,
	output		          		DRAM_CKE,
	output		          		DRAM_CLK,
	output		          		DRAM_CS_N,
	inout 		    [15:0]		DRAM_DQ,
	output		          		DRAM_LDQM,
	output		          		DRAM_RAS_N,
	output		          		DRAM_UDQM,
	output		          		DRAM_WE_N,
`endif

	//////////// SEG7: 3.3-V LVTTL //////////
`ifdef ENABLE_HEX0
	output		     [7:0]		HEX0,
`endif
`ifdef ENABLE_HEX1
	output		     [7:0]		HEX1,
`endif
`ifdef ENABLE_HEX2
	output		     [7:0]		HEX2,
`endif
`ifdef ENABLE_HEX3
	output		     [7:0]		HEX3,
`endif
`ifdef ENABLE_HEX4
	output		     [7:0]		HEX4,
`endif
`ifdef ENABLE_HEX5
	output		     [7:0]		HEX5,
`endif

	//////////// KEY: 3.3 V SCHMITT TRIGGER //////////
`ifdef ENABLE_KEY
	input 		     [1:0]		KEY,
`endif

	//////////// LED: 3.3-V LVTTL //////////
`ifdef ENABLE_LED
	output		     [9:0]		LEDR,
`endif

	//////////// SW: 3.3-V LVTTL //////////
`ifdef ENABLE_SW
	input 		     [9:0]		SW,
`endif

	//////////// VGA: 3.3-V LVTTL //////////
`ifdef ENABLE_VGA
	output		     [3:0]		VGA_B,
	output		     [3:0]		VGA_G,
	output		          		VGA_HS,
	output		     [3:0]		VGA_R,
	output		          		VGA_VS,
`endif

	//////////// Accelerometer: 3.3-V LVTTL //////////
`ifdef ENABLE_ACCELEROMETER
	output		          		GSENSOR_CS_N,
	input 		     [2:1]		GSENSOR_INT,
	output		          		GSENSOR_SCLK,
	inout 		          		GSENSOR_SDI,
	inout 		          		GSENSOR_SDO,
`endif

	//////////// Arduino: 3.3-V LVTTL //////////
`ifdef ENABLE_ARDUINO
	inout 		    [15:0]		ARDUINO_IO,
	inout 		          		ARDUINO_RESET_N,
`endif

	//////////// GPIO, GPIO connect to GPIO Default: 3.3-V LVTTL //////////
`ifdef ENABLE_GPIO
	inout 		    [35:0]		GPIO
`endif
);



//=======================================================
//  REG/WIRE declarations
//=======================================================

	wire clk;
	reg [3:0]dig0;
	reg [3:0]dig1;
	reg [3:0]dig2;
	reg [3:0]dig3;
	reg [3:0]dig4;
	reg [3:0]dig5;

//=======================================================
//  Structural coding
//=======================================================

	//N=23
	Prescaler #(.N(22)) pres(.clk_in(ADC_CLK_10), .clk_out(clk));

	SevSegController ssc0(.dig(dig0),.dot(clk),.leds(HEX0));
	SevSegController ssc1(.dig(dig1),.dot(clk),.leds(HEX1));
	SevSegController ssc2(.dig(dig2),.dot(clk),.leds(HEX2));
	SevSegController ssc3(.dig(dig3),.dot(clk),.leds(HEX3));
	SevSegController ssc4(.dig(dig4),.dot(clk),.leds(HEX4));
	SevSegController ssc5(.dig(dig5),.dot(clk),.leds(HEX5));
	/*
	
	wire [7:0] aluA;
	wire [7:0] aluB;
	wire [7:0] aluR;
	
	wire [7:0] RZ;
	wire [7:0] ABZ;
	
	wire [7:0] romO;	
	
	reg [4:0] dataRaw;
	reg [4:0] data;
	reg [4:0] cmd;
	
	wire [3:0] cnt;
	
	wire selA;
	wire selB;
	wire selZ;
	wire selR;
	wire selALU;
	wire selShf;
	
	
	wire [7:0] debugFlagA;
	wire [7:0] debugFlagB;
	
	reg ucA;
	reg ucB;
	reg ucZ;
	reg ucR;
	reg ucALU;
	reg ucShfU;
	reg ucShfD;
	
	
	Register regA(.clk(clk), .dataIN(ABZ), .dataOUT(aluA), .sel(ucA));
	Register regB(.clk(clk), .dataIN(ABZ), .dataOUT(aluB), .sel(ucB));
	Register regR(.clk(clk), .dataIN(aluR), .dataOUT(debugFlagA), .sel(ucR));
	Register regZ(.clk(clk), .dataIN(RZ), .dataOUT(ABZ), .sel(ucZ));// poner OUT ABZ
	
	Shifter shft(.clk(clk), .dataIN(data),.dataOUT(RZ), .up(ucShfU), .down(ucShfD));
	
	Counter cont(.clk(KEY[0]), .cnt(cnt));
	ROMemory rom(.clk(clk), .data(romO), .addr(cnt));
	
	ALU alu(.clk(clk), .opA(aluA), .opB(aluB), .sel(ucALU), .res(aluR));

	
	// Control Unit
	always cmd = romO[7:4];
	always dataRaw = romO[3:0];
	
	
	
	// DEBUG		
	assign debugFlagA[3:0] = dig2;
	assign debugFlagA[7:4] = dig3;
	
	
	assign debugFlagB[3:0] = dig4;
	assign debugFlagB[7:4] = dig5;
	
	
	assign LEDR[0] = ucA;
	assign LEDR[1] = ucB;
	assign LEDR[2] = ucZ;
	assign LEDR[3] = ucR;
	assign LEDR[4] = ucALU;	
	assign LEDR[5] = ucShfD;
	assign LEDR[6] = ucShfU;
	
	always cmd = dig1;
	always dataRaw = dig0;
	//
	
	initial begin
		ucA <= 0;
		ucB <= 0;
		ucZ <= 0;
		ucR <= 0;
	end
	
	
	always @(posedge(clk)) begin
		
		case (cmd)
		4'b0000 : begin //ADD
						ucALU <= 0;
						ucShfD <= 0;
						ucShfU <= 0;
						ucA <= 0;
						ucB <= 0;
						ucZ <= 0;
						ucR <= 1;
					 end
			
		4'b0001 : begin // SUB
						ucALU <= 1;
						ucShfD <= 0;
						ucShfU <= 0;
						ucA <= 0;
						ucB <= 0;
						ucZ <= 0;
						ucR <= 1;
					 end
					 
		4'b0010 : begin // LOAD A
						ucALU <= 0;
						ucShfD <= 0;
						ucShfU <= 0;
						ucA <= 1;
						ucB <= 0;
						ucZ <= 0;
						ucR <= 0;
					 end
					 
		4'b0011 : begin // LOAD B
						ucALU <= 0;
						ucShfD <= 0;
						ucShfU <= 0;
						ucA <= 0;
						ucB <= 1;
						ucZ <= 0;
						ucR <= 0;
					 end
					 
		4'b0100 : begin // LOAD Z 
						ucALU <= 0;
						ucShfD <= 0;
						ucShfU <= 0;
						ucA <= 0;
						ucB <= 0;
						ucZ <= 1;
						ucR <= 0;
					 end
					 
		4'b0101 : begin // LOAD Shift Down
						ucALU <= 0;
						ucShfD <= 1;
						ucShfU <= 0;
						ucA <= 0;
						ucB <= 0;
						ucZ <= 0;
						ucR <= 0;	
					 end
					 
		4'b0110 : begin // LOAD Shift Up
						ucALU <= 0;
						ucShfD <= 0;
						ucShfU <= 1;
						ucA <= 0;
						ucB <= 0;
						ucZ <= 0;
						ucR <= 0;
					 end
					 
		4'b0111 : begin		
					 end
					 
		default: begin 
						ucALU <= 0;
						ucShfD <= 0;
						ucShfU <= 0;
						ucA <= 0;
						ucB <= 0;
						ucZ <= 0;
						ucR <= 0;
					 end
					 
		endcase
	   data <= dataRaw;
		
		
		
		
		
	
	end*/
	wire [7:0] outA;
	wire [7:0] outB;
	
		Demultiplexor demuxA(.dataIN(SW[7:0]), .dataOUTA(outA), .dataOUTB(outB), .sel(KEY[0]));
	
	assign outA[3:0]= dig0;
	assign outA[7:4] = dig1;	
	
	assign outB[3:0] = dig2;
	assign outB[7:4] = dig3;
	
	


endmodule
